

class A:
    val = 1

    def foo(self):
        A.val += 2

    def bar(self):
        self.val += 1


a = A()
b = A()

a.bar()
a.foo()

c = A()

print(a.val)
print(b.val)
print(c.val)


# Для лучшего понимания можно чутка изменить код:
#
# class A:
#     val = 1
#
#     def foo(self):
#         # мы всегда обращаемся к атрибуту класса, из любого экземпляра
#         A.val = A.val + 2
#
#     def bar(self):
#                    # во время первого вызова bar это обращение к атрибуту класса,
#                    # т.к. у экземпляра класса еще нет атрибута val
#                    # |
#                    # |
#         self.val = self.val + 1
#         # |
#         # |
#         # после присвоения, у экземпляра появится свой атрибут val,
#         # все последующие вызовы bar будут работать с ним
#
# a = A() # инстанс класса А, у него нет своего атрибута val
# b = A() # инстанс класса А, у него нет своего атрибута val
#
# A.bar(a) # у экземпляра a появился свой атрибут a.val = A.val + 1
# A.foo(a) # изменение атрибута класса A.val = A.val + 2
#
# c = A() # инстанс класса А, у него нет своего атрибута val
